/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package vista;

import controlador.Controlador;
import java.awt.Component;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Conexion;
import static vista.CRUDProcedimientoServicio.txtUsuarioPro;

/**
 *
 * @author luigy
 */
public class CRUDCitas extends javax.swing.JFrame {
    
    Controlador controlador = new Controlador();
    

    /**
     * Creates new form CRUDCitas
     */
    public CRUDCitas() {
        initComponents();
        setLocationRelativeTo(null);
        /*for(Component a:pnlDatos.getComponents()){
            a.setEnabled(false);
        }*/
        txtNumFactura.setText("0");
        txtIdCitas.setEditable(false);
        cboDomicilioCitas.setEditable(false);
        txtUsuarioVeterinarioCitas.setEditable(false);
        txtIDProcedimiento.setEditable(false);
        //cboEstado.setEnabled(false);
        txtNumFactura.setEditable(false);
        txtCedulaCliente.setEditable(false);
        btnEnviarAHistorial.setEnabled(false);
        btnCrearCita.setEnabled(false);
        btnProcedimientoServicio.setEnabled(false);
        //verificarVeterinario();
        txtRolPrincipal.setVisible(false);
        txtUsuarioVeterinario1.setVisible(false);
        txtUsuarioCliente.setVisible(false);
        txtContraClienteS.setVisible(false);
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        Lista1 = new javax.swing.JButton();
        btnCrearCita = new javax.swing.JButton();
        btnBuscarCita = new javax.swing.JButton();
        btnBorrarCita = new javax.swing.JButton();
        btnActualizarCita = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        pnlDatos = new javax.swing.JPanel();
        lbl1 = new javax.swing.JLabel();
        lbl4 = new javax.swing.JLabel();
        lbl5 = new javax.swing.JLabel();
        txtIdCitas = new javax.swing.JTextField();
        txtIDProcedimiento = new javax.swing.JTextField();
        txtNumFactura = new javax.swing.JTextField();
        lbl2 = new javax.swing.JLabel();
        lbl6 = new javax.swing.JLabel();
        txtCedulaCliente = new javax.swing.JTextField();
        lbl7 = new javax.swing.JLabel();
        cboDomicilioCitas = new javax.swing.JComboBox<>();
        cboEstado = new javax.swing.JComboBox<>();
        lbl3 = new javax.swing.JLabel();
        txtUsuarioVeterinarioCitas = new javax.swing.JTextField();
        btnProcedimientoServicio = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCitas = new javax.swing.JTable();
        txtRolPrincipal = new javax.swing.JTextField();
        txtHabilitar = new javax.swing.JButton();
        txtUsuarioVeterinario1 = new javax.swing.JTextField();
        txtUsuarioCliente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cboBuscarCita = new javax.swing.JComboBox<>();
        btnEnviarAHistorial = new javax.swing.JButton();
        txtContraClienteS = new javax.swing.JTextField();

        jRadioButton1.setText("jRadioButton1");

        Lista1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Lista1.setText("Procedimientos");
        Lista1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Lista1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnCrearCita.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCrearCita.setText("Crear");
        btnCrearCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearCitaActionPerformed(evt);
            }
        });

        btnBuscarCita.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBuscarCita.setText("Buscar");
        btnBuscarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCitaActionPerformed(evt);
            }
        });

        btnBorrarCita.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBorrarCita.setText("Borrar");
        btnBorrarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarCitaActionPerformed(evt);
            }
        });

        btnActualizarCita.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnActualizarCita.setText("Actualizar");
        btnActualizarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarCitaActionPerformed(evt);
            }
        });

        btnVolver.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Administrar Citas");

        pnlDatos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        lbl1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbl1.setText("ID de la Cita");

        lbl4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbl4.setText("ID del Procedimiento/Servicio");

        lbl5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbl5.setText("Estado");

        txtIdCitas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtIDProcedimiento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtNumFactura.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtNumFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumFacturaActionPerformed(evt);
            }
        });

        lbl2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbl2.setText("Domicilio");

        lbl6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbl6.setText("Numero de Factura");

        txtCedulaCliente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lbl7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbl7.setText("Cedula Cliente");

        cboDomicilioCitas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboDomicilioCitas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Si", "No" }));

        cboEstado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pendiente", "Asignada", "Realizada", "Cancelada por el cliente", "Cancelada por el veterinario" }));
        cboEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboEstadoActionPerformed(evt);
            }
        });

        lbl3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbl3.setText("Usuario del veterinario");

        txtUsuarioVeterinarioCitas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnProcedimientoServicio.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnProcedimientoServicio.setText("Seleccionar procedimiento/servicio");
        btnProcedimientoServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcedimientoServicioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDatosLayout = new javax.swing.GroupLayout(pnlDatos);
        pnlDatos.setLayout(pnlDatosLayout);
        pnlDatosLayout.setHorizontalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnProcedimientoServicio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl1)
                            .addComponent(lbl4)
                            .addComponent(lbl2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIDProcedimiento)
                            .addComponent(cboDomicilioCitas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtIdCitas, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatosLayout.createSequentialGroup()
                        .addComponent(lbl3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(txtUsuarioVeterinarioCitas, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatosLayout.createSequentialGroup()
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl6)
                            .addComponent(lbl5)
                            .addComponent(lbl7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCedulaCliente)
                            .addComponent(txtNumFactura)
                            .addComponent(cboEstado, javax.swing.GroupLayout.Alignment.TRAILING, 0, 163, Short.MAX_VALUE))))
                .addContainerGap())
        );
        pnlDatosLayout.setVerticalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosLayout.createSequentialGroup()
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIdCitas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl1))
                        .addGap(18, 18, 18)
                        .addComponent(cboDomicilioCitas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(lbl2)))
                .addGap(18, 18, 18)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl3)
                    .addComponent(txtUsuarioVeterinarioCitas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl4)
                    .addComponent(txtIDProcedimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl5))
                .addGap(24, 24, 24)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl6)
                    .addComponent(txtNumFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl7)
                    .addComponent(txtCedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnProcedimientoServicio)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID cita", "Fecha", "Domicilio", "Usuario veterinario", "ID Procedimiento/servicio", "Estado", "# factura", "Cédula cliente", "Usuario cliente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCitasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCitas);
        if (tblCitas.getColumnModel().getColumnCount() > 0) {
            tblCitas.getColumnModel().getColumn(0).setResizable(false);
            tblCitas.getColumnModel().getColumn(1).setResizable(false);
            tblCitas.getColumnModel().getColumn(2).setResizable(false);
            tblCitas.getColumnModel().getColumn(3).setResizable(false);
            tblCitas.getColumnModel().getColumn(4).setResizable(false);
            tblCitas.getColumnModel().getColumn(5).setResizable(false);
            tblCitas.getColumnModel().getColumn(6).setResizable(false);
            tblCitas.getColumnModel().getColumn(7).setResizable(false);
        }

        txtHabilitar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtHabilitar.setText("Habilitar opciones");
        txtHabilitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHabilitarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Buscar citas por estado");

        cboBuscarCita.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboBuscarCita.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pendiente", "Asignada", "Realizada", "Cancelada por el cliente", "Cancelada por el veterinario" }));

        btnEnviarAHistorial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEnviarAHistorial.setText("Enviar a historial");
        btnEnviarAHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarAHistorialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCrearCita, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnBuscarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBorrarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRolPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUsuarioVeterinario1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtUsuarioCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtContraClienteS, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 492, Short.MAX_VALUE)
                        .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cboBuscarCita, 0, 1, Short.MAX_VALUE)
                                .addGap(87, 87, 87))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1)
                                    .addComponent(pnlDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHabilitar))
                                .addGap(21, 21, 21)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 946, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEnviarAHistorial)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(pnlDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHabilitar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboBuscarCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(btnEnviarAHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarCita)
                    .addComponent(btnActualizarCita)
                    .addComponent(btnBorrarCita)
                    .addComponent(btnVolver)
                    .addComponent(btnCrearCita)
                    .addComponent(txtRolPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUsuarioVeterinario1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUsuarioCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtContraClienteS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearCitaActionPerformed
        Calendar fecha = new GregorianCalendar();
        int año = fecha.get(Calendar.YEAR);
        int mes = fecha.get(Calendar.MONTH);
        int dia = fecha.get(Calendar.DAY_OF_MONTH);
        
        String sA = String.valueOf(año);
        String sB = String.valueOf(mes+1);        
        String sC = String.valueOf(dia);
        
        String res = sA+"-"+ sB+"-"+sC;
        int numFacturan = 0;
        
        //int idCita = Integer.parseInt(this.txtIdCita.getText());
        int idProcedimiento = Integer.parseInt(this.txtIDProcedimiento.getText());
        int numFactura = Integer.parseInt(this.txtNumFactura.getText());
        int cedulaCliente = Integer.parseInt(this.txtCedulaCliente.getText());
        if(txtNumFactura.getText().equals("")){
            numFactura = numFacturan;
        }
                
        //String user = this.txtUsuarioPro.getText();
        try {
            controlador.RegistrarCitaMedica(res,this.cboDomicilioCitas.getSelectedItem().toString(), this.txtUsuarioVeterinarioCitas.getText(), idProcedimiento, this.cboEstado.getSelectedItem().toString(), numFactura, cedulaCliente, this.txtUsuarioCliente.getText());
          limpiarTxt();
        } catch (SQLException | ClassNotFoundException | IllegalAccessException | InstantiationException ex) {
            Logger.getLogger(CRUDCitas.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*
        txtIdCita.setEnabled(false);
        txtUsuarioVeterinario.setEnabled(false);
        txtIDProcedimiento.setEnabled(false);
        cboEstado.setEnabled(false);
        txtNumFactura.setEnabled(false);
        */
        
    }//GEN-LAST:event_btnCrearCitaActionPerformed

    private void btnBuscarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCitaActionPerformed
        String nu = cboBuscarCita.getSelectedItem().toString();
        if(txtRolPrincipal.getText().equals("Cliente")){
           cargarTabla1(); 
        }
        else{
            if(nu.equals("")){
                cargarTabla2();
            }
            else{
                cargarTablaGeneral(nu);
            }
            
        }
    }//GEN-LAST:event_btnBuscarCitaActionPerformed

    private void btnBorrarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarCitaActionPerformed
        int id = Integer.parseInt(this.txtIdCitas.getText());
        try {
            controlador.BorrarCitaMedica(id);
            JOptionPane.showMessageDialog(null, "Registro borrado correctamente");
            limpiarTxt();
        } catch (SQLException | ClassNotFoundException | IllegalAccessException | InstantiationException ex) {
            Logger.getLogger(CRUDcategoriaProcedimientosServicios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBorrarCitaActionPerformed

    private void btnActualizarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarCitaActionPerformed
         Calendar fecha = new GregorianCalendar();
        int año = fecha.get(Calendar.YEAR);
        int mes = fecha.get(Calendar.MONTH);
        int dia = fecha.get(Calendar.DAY_OF_MONTH);
        
        String sA = String.valueOf(año);
        String sB = String.valueOf(mes+1);        
        String sC = String.valueOf(dia);
        
        String res = sA+"-"+ sB+"-"+sC;
        
        int id = Integer.parseInt(this.txtIdCitas.getText());
        
        int cedulaCliente = Integer.parseInt(this.txtCedulaCliente.getText());
        int factura = Integer.parseInt(this.txtNumFactura.getText());
        int idpro = Integer.parseInt(CRUDCitas.txtIDProcedimiento.getText());
        try {
            controlador.ActualizaCitaMedica(id, this.cboDomicilioCitas.getSelectedItem().toString(),CRUDCitas.txtUsuarioVeterinarioCitas.getText(), idpro, this.cboEstado.getSelectedItem().toString(), factura,cedulaCliente, res);
        JOptionPane.showMessageDialog(null, "Registro modificado correctamente");
        if (this.cboEstado.getSelectedItem().toString().equals("Realizada")){
                    controlador.pdf(txtCedulaCliente.getText(), txtIdCitas.getText(),txtIDProcedimiento.getText(),txtUsuarioVeterinarioCitas.getText());
            }
            this.dispose();
        //limpiarTxt();
        } catch (SQLException | ClassNotFoundException | IllegalAccessException | InstantiationException ex) {
            Logger.getLogger(CRUDProcedimientoServicio.class.getName()).log(Level.SEVERE, null, ex);
        //} catch (IOException ex) {
        //    Logger.getLogger(CRUDCitas.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnActualizarCitaActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        
        if(txtRolPrincipal.getText().equals("Cliente")){
            String rol = txtRolPrincipal.getText();
            String usuarioCliente = txtUsuarioCliente.getText();
            String contra = txtContraClienteS.getText();
            MenuCliente ru = new MenuCliente();
            ru.setVisible(true);
            this.dispose();
            MenuCliente.txtEnviarUsuario.setText(usuarioCliente);
            MenuCliente.txtRolEnviarCitas.setText(rol);
            MenuCliente.txtEnviarContra.setText(contra);
        }else if(txtRolPrincipal.getText().equals("Veterinario")){
            String rol2 = txtRolPrincipal.getText();
            String usuarioVeter2 = txtUsuarioVeterinario1.getText();
            MenuVeterinario ru = new MenuVeterinario();
            ru.setVisible(true);
            this.dispose();
            MenuVeterinario.txtPruebaUsuario.setText(usuarioVeter2);
            MenuVeterinario.txtRolInicio.setText(rol2);
        }else{
            String rol3 = txtRolPrincipal.getText();
            String usuarioCliente3 = txtUsuarioVeterinario1.getText();
            MenuAdministrador ru = new MenuAdministrador();
            ru.setVisible(true);
            this.dispose();
            MenuAdministrador.txtNombreUsuario.setText(usuarioCliente3);
            MenuAdministrador.txtOBtenerRol.setText(rol3);
        }
    }//GEN-LAST:event_btnVolverActionPerformed

    private void txtNumFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumFacturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumFacturaActionPerformed

    private void Lista1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Lista1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Lista1ActionPerformed

    private void btnProcedimientoServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcedimientoServicioActionPerformed
        //String u = txtRolPrincipal.getText();
        if(txtRolPrincipal.getText().equals("Veterinario") ){
            //BtnProcedimientoServicio.setEnabled(false);
            JOptionPane.showMessageDialog(null, "Usted no tiene acceso a esta opción");
            return;
        }
        ClienteEscogeProcedimientoServicio ru = new ClienteEscogeProcedimientoServicio();
        ru.setVisible(true);
        //CRUDCitas vi = new CRUDCitas();
        //this.dispose();
    }//GEN-LAST:event_btnProcedimientoServicioActionPerformed

    private void txtHabilitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHabilitarActionPerformed
        String rol = this.txtRolPrincipal.getText();
        if(rol.equals("Veterinario")){
            //lbl6.setEnabled(true);
            //lbl5.setEnabled(true);
            txtNumFactura.setEditable(true);
            cboEstado.setEditable(true);
            btnEnviarAHistorial.setEnabled(true);
            return;
        }
        else{
            /*
            txtIdCita.setEnabled(true);
            txtUsuarioVeterinario.setEnabled(true);
            txtIDProcedimiento.setEnabled(true);
            cboEstado.setEnabled(true);
            txtNumFactura.setEnabled(true);*/
            btnProcedimientoServicio.setEnabled(true);
            btnCrearCita.setEnabled(true);
            cboDomicilioCitas.setEditable(true);
            txtCedulaCliente.setEditable(true);
        }
    }//GEN-LAST:event_txtHabilitarActionPerformed

    private void tblCitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCitasMouseClicked
        try{
            int fila = tblCitas.getSelectedRow();
            int id = Integer.parseInt(tblCitas.getValueAt(fila, 0).toString());
            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDCita, Domicilio, NombreUsuario, IDProcedimiento_Servicio, Estado, numFactura, CedulaCliente FROM CitasMedicas WHERE IDCita=?");
            ps.setInt(1, id);
            rs = ps.executeQuery();
            while(rs.next()){
                txtIdCitas.setText(String.valueOf(id));
                cboDomicilioCitas.setSelectedItem(rs.getString("Domicilio"));
                txtUsuarioVeterinarioCitas.setText(rs.getString("NombreUsuario"));
                txtIDProcedimiento.setText(rs.getString("IDProcedimiento_Servicio"));
                cboEstado.setSelectedItem(rs.getString("Estado"));    
                txtNumFactura.setText(rs.getString("numFactura"));
                txtCedulaCliente.setText(rs.getString("CedulaCliente"));
                          
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }//GEN-LAST:event_tblCitasMouseClicked

    private void btnEnviarAHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarAHistorialActionPerformed
        String nn = txtIdCitas.getText();
        String nu = cboEstado.getSelectedItem().toString();
        String na = cboDomicilioCitas.getSelectedItem().toString();
        String nc = txtUsuarioVeterinarioCitas.getText();
        if(nu.equals("Realizada")){
            CRUDHistorial ru = new CRUDHistorial();
            ru.setVisible(true);
            this.dispose();
            CRUDHistorial.txtIDCitaHistorial.setText(nn);
            CRUDHistorial.btnDomicilioHistorial.setSelectedItem(na);
            CRUDHistorial.txtUsuarioVeterinarionHistorial.setText(nc);
        }
        else{
            JOptionPane.showMessageDialog(null, "El estado de la cita debe estar en realizada");
            return;
        }
    }//GEN-LAST:event_btnEnviarAHistorialActionPerformed

    private void cboEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboEstadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboEstadoActionPerformed
    
    private void verificarVeterinario(){
        String rol = this.txtRolPrincipal.getText();
        if(rol.equals("Veterinario")){
            
            //BtnProcedimientoServicio.setEnabled(false);
            txtUsuarioVeterinarioCitas.setEnabled(false);
            return;
        }
    }
    
    private void limpiarTxt(){
        txtIdCitas.setText("");
        txtIDProcedimiento.setText("");
        txtUsuarioVeterinarioCitas.setText("");
        txtCedulaCliente.setText("");
        txtNumFactura.setText("");
      }
    private void cargarTabla1(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblCitas.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 150, 100, 150, 100, 100, 100, 50, 50};
        for(int i = 0; i < tblCitas.getColumnCount();i++){
            tblCitas.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        String user = txtUsuarioCliente.getText();
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDCita, Fecha, Domicilio, NombreUsuario, IDProcedimiento_Servicio, Estado, numFactura, CedulaCliente, usuarioCliente FROM CitasMedicas WHERE usuarioCliente = ?");
            ps.setString(1, user);
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                Object[] fila = new Object[columnas];
                for(int indice = 0; indice < columnas; indice++){
                    fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);
                
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void cargarTabla2(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblCitas.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 150, 100, 150, 100, 100, 100, 50, 50};
        for(int i = 0; i < tblCitas.getColumnCount();i++){
            tblCitas.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        String user = txtUsuarioVeterinario1.getText();
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDCita, Fecha, Domicilio, NombreUsuario, IDProcedimiento_Servicio, Estado, numFactura, CedulaCliente, usuarioCliente FROM CitasMedicas WHERE NombreUsuario = ?");
            ps.setString(1, user);
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                Object[] fila = new Object[columnas];
                for(int indice = 0; indice < columnas; indice++){
                    fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);
                
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    
    private void cargarTablaGeneral(String estado){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblCitas.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 150, 100, 150, 100, 100, 100, 50, 50};
        for(int i = 0; i < tblCitas.getColumnCount();i++){
            tblCitas.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        String user = estado;
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDCita, Fecha, Domicilio, NombreUsuario, IDProcedimiento_Servicio, Estado, numFactura, CedulaCliente, usuarioCliente FROM CitasMedicas WHERE Estado = ?");
            ps.setString(1, user);
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                Object[] fila = new Object[columnas];
                for(int indice = 0; indice < columnas; indice++){
                    fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);
                
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    public static void main(String args[]) {
       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CRUDCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CRUDCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CRUDCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CRUDCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CRUDCitas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Lista1;
    private javax.swing.JButton btnActualizarCita;
    private javax.swing.JButton btnBorrarCita;
    private javax.swing.JButton btnBuscarCita;
    private javax.swing.JButton btnCrearCita;
    private javax.swing.JButton btnEnviarAHistorial;
    private javax.swing.JButton btnProcedimientoServicio;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<String> cboBuscarCita;
    private javax.swing.JComboBox<String> cboDomicilioCitas;
    private javax.swing.JComboBox<String> cboEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lbl2;
    private javax.swing.JLabel lbl3;
    private javax.swing.JLabel lbl4;
    private javax.swing.JLabel lbl5;
    private javax.swing.JLabel lbl6;
    private javax.swing.JLabel lbl7;
    private javax.swing.JPanel pnlDatos;
    private javax.swing.JTable tblCitas;
    private javax.swing.JTextField txtCedulaCliente;
    public static javax.swing.JTextField txtContraClienteS;
    private javax.swing.JButton txtHabilitar;
    public static javax.swing.JTextField txtIDProcedimiento;
    private javax.swing.JTextField txtIdCitas;
    private javax.swing.JTextField txtNumFactura;
    public static javax.swing.JTextField txtRolPrincipal;
    public static javax.swing.JTextField txtUsuarioCliente;
    public static javax.swing.JTextField txtUsuarioVeterinario1;
    public static javax.swing.JTextField txtUsuarioVeterinarioCitas;
    // End of variables declaration//GEN-END:variables
}
