/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Conexion;
import static vista.CRUDProcedimientoServicio.txtCategoria;

/**
 *
 * @author luigy
 */
public class BusquedaCliente extends javax.swing.JFrame {

    /**
     * Creates new form BusquedaCliente
     */
    public BusquedaCliente() {
        initComponents();
        setLocationRelativeTo(null);
        txtRecibirContra2.setVisible(false);
        txtRecibirROL1.setVisible(false);
        txtRecibirUser.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblServicioProcedimientosBusCliente = new javax.swing.JTable();
        BuscarTodos = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Tipo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtIDCategoria = new javax.swing.JTextField();
        Minimo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Maximo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        VolverCliente2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cboElejirFiltroGeneral = new javax.swing.JComboBox<>();
        txtBuscarGeneral = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        RealizaCita = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtIDEnviarProSer = new javax.swing.JTextField();
        txtEnviarNombreUsuarioVeterinario = new javax.swing.JTextField();
        txtRecibirUser = new javax.swing.JTextField();
        txtRecibirROL1 = new javax.swing.JTextField();
        txtRecibirContra2 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblVeterinario = new javax.swing.JTable();
        BuscarUbicacion = new javax.swing.JButton();
        Ubicacion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        VolverCliente1 = new javax.swing.JButton();
        BuscarVeterinarios = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jPanel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        tblServicioProcedimientosBusCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Descripción", "Tipo", "MontoUnitario", "MontoServicioDomicilio", "IDCategoria", "Usuario veterinario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblServicioProcedimientosBusCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblServicioProcedimientosBusClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblServicioProcedimientosBusCliente);
        if (tblServicioProcedimientosBusCliente.getColumnModel().getColumnCount() > 0) {
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(0).setResizable(false);
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(1).setResizable(false);
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(2).setResizable(false);
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(3).setResizable(false);
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(4).setResizable(false);
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(5).setResizable(false);
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(6).setResizable(false);
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(7).setResizable(false);
        }

        BuscarTodos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BuscarTodos.setText("Buscar todos");
        BuscarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarTodosActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Tipo");

        Tipo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Tipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Procedimiento", "Servicio" }));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("ID Categoria");

        txtIDCategoria.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        Minimo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Rango de Precios");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Máximo");

        Maximo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Maximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaximoActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Mínimo");

        VolverCliente2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        VolverCliente2.setText("Volver");
        VolverCliente2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverCliente2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Elija un filtro");

        cboElejirFiltroGeneral.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboElejirFiltroGeneral.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo procedimiento", "ID categoría", "Rango de precios", "Tipo procedimiento, ID categoría", "Tipo procedimiento, Rango de precios", "ID categoría,  Rango de precios" }));

        txtBuscarGeneral.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBuscarGeneral.setText("Buscar");
        txtBuscarGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarGeneralActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos para realizar cita", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        RealizaCita.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RealizaCita.setText("Realizar Cita");
        RealizaCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RealizaCitaActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Id ");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Usuario veterinario");

        txtIDEnviarProSer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtEnviarNombreUsuarioVeterinario.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RealizaCita, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                                .addComponent(txtIDEnviarProSer, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(txtEnviarNombreUsuarioVeterinario)))))
                .addGap(39, 39, 39))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RealizaCita)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIDEnviarProSer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtEnviarNombreUsuarioVeterinario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        txtRecibirUser.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtRecibirROL1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtRecibirContra2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(VolverCliente2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cboElejirFiltroGeneral, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(9, 9, 9)
                                                .addComponent(Tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(50, 50, 50)
                                                .addComponent(jLabel1)))
                                        .addGap(27, 27, 27)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtIDCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addComponent(jLabel2)))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGap(10, 10, 10)
                                                        .addComponent(jLabel5))
                                                    .addComponent(Maximo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(Minimo, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(41, 41, 41)
                                                        .addComponent(txtBuscarGeneral))
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGap(11, 11, 11)
                                                        .addComponent(jLabel4)))
                                                .addGap(10, 10, 10))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(jLabel3)
                                                .addGap(0, 0, Short.MAX_VALUE))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(BuscarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(65, 65, 65)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRecibirContra2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRecibirROL1))
                                .addGap(18, 18, 18)
                                .addComponent(txtRecibirUser, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(txtRecibirContra2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtRecibirUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRecibirROL1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(VolverCliente2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboElejirFiltroGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BuscarTodos))
                        .addGap(43, 43, 43)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtIDCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Maximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Minimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBuscarGeneral))
                                .addGap(2, 2, 2)))
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("Servicios/Procedimientos", jPanel1);

        tblVeterinario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "IDVeterinario", "NombreVeterinario", "Calificacion", "Correo", "SitioWeb", "Distrito", "Canton", "Provincia", "Señas", "UGoogleMaps", "Estado", "NombreUsuario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblVeterinario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblVeterinarioMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tblVeterinario);

        BuscarUbicacion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BuscarUbicacion.setText("Buscar");
        BuscarUbicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarUbicacionActionPerformed(evt);
            }
        });

        Ubicacion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Ubicación");

        VolverCliente1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        VolverCliente1.setText("Volver");
        VolverCliente1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverCliente1ActionPerformed(evt);
            }
        });

        BuscarVeterinarios.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BuscarVeterinarios.setText("Buscar todos");
        BuscarVeterinarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarVeterinariosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 1001, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(358, 358, 358)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Ubicacion)
                                    .addComponent(BuscarUbicacion, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(VolverCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BuscarVeterinarios, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ubicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BuscarVeterinarios))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BuscarUbicacion)
                    .addComponent(VolverCliente1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Veterinarios", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblServicioProcedimientosBusClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblServicioProcedimientosBusClienteMouseClicked
        try{
            int fila = tblServicioProcedimientosBusCliente.getSelectedRow();
            int id = Integer.parseInt(tblServicioProcedimientosBusCliente.getValueAt(fila, 0).toString());
            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDProcedimiento_Servicio, NombreUsuario FROM Procedimientos_Servicios WHERE IDProcedimiento_Servicio = ?");
            ps.setInt(1, id);
            rs = ps.executeQuery();
            while(rs.next()){
                txtIDEnviarProSer.setText(String.valueOf(id));
                txtEnviarNombreUsuarioVeterinario.setText(rs.getString("NombreUsuario"));
                          
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }//GEN-LAST:event_tblServicioProcedimientosBusClienteMouseClicked

    private void tblVeterinarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblVeterinarioMouseClicked
        
    }//GEN-LAST:event_tblVeterinarioMouseClicked

    private void BuscarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarTodosActionPerformed
        cargarTablaProcedimientos();
    }//GEN-LAST:event_BuscarTodosActionPerformed

    private void cargarTablaProcedimientos(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblServicioProcedimientosBusCliente.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 50, 50, 50, 50, 50, 20, 10};
        for(int i = 0; i < tblServicioProcedimientosBusCliente.getColumnCount();i++){
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDProcedimiento_Servicio, NombreProcedimiento, Descripcion, Tipo, MontoUnitario, MontoServicioDomicilio, IDCategoria, NombreUsuario FROM Procedimientos_Servicios");
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                Object[] fila = new Object[columnas];
                for(int indice = 0; indice < columnas; indice++){
                    fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);
                
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void cargarTablaTipo(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblServicioProcedimientosBusCliente.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 50, 50, 50, 50, 50, 20, 10};
        for(int i = 0; i < tblServicioProcedimientosBusCliente.getColumnCount();i++){
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        String tipo = Tipo.getSelectedItem().toString();
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDProcedimiento_Servicio, NombreProcedimiento, Descripcion, Tipo, MontoUnitario, MontoServicioDomicilio, IDCategoria, NombreUsuario FROM Procedimientos_Servicios WHERE Tipo = ?");
            ps.setString(1, tipo);
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                Object[] fila = new Object[columnas];
                for(int indice = 0; indice < columnas; indice++){
                    fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);
                
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
        
    }
    
    private void cargarTablaCategoria(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblServicioProcedimientosBusCliente.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 50, 50, 50, 50, 50, 20, 10};
        for(int i = 0; i < tblServicioProcedimientosBusCliente.getColumnCount();i++){
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        String categoria = txtIDCategoria.getText();
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDProcedimiento_Servicio, NombreProcedimiento, Descripcion, Tipo, MontoUnitario, MontoServicioDomicilio, IDCategoria, NombreUsuario FROM Procedimientos_Servicios WHERE IDCategoria = ?");
            ps.setString(1, categoria);
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                Object[] fila = new Object[columnas];
                for(int indice = 0; indice < columnas; indice++){
                    fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);
                
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void cargarTablaPrecio(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblServicioProcedimientosBusCliente.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 50, 50, 50, 50, 50, 20, 10};
        for(int i = 0; i < tblServicioProcedimientosBusCliente.getColumnCount();i++){
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        int Max = Integer.parseInt(this.Maximo.getText());
        int Min = Integer.parseInt(this.Minimo.getText());
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDProcedimiento_Servicio, NombreProcedimiento, Descripcion, Tipo, MontoUnitario, MontoServicioDomicilio, IDCategoria, NombreUsuario FROM Procedimientos_Servicios WHERE MontoUnitario >= ? and MontoUnitario <= ?");
            ps.setInt(1, Max);
            ps.setInt(2, Min);
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                    Object[] fila = new Object[columnas];
                    for(int indice = 0; indice < columnas; indice++){
                        fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);  
            }
        }
        
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }

    private void cargarTablaTipoProcedimientoIDCategoria(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblServicioProcedimientosBusCliente.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 50, 50, 50, 50, 50, 20, 10};
        for(int i = 0; i < tblServicioProcedimientosBusCliente.getColumnCount();i++){
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        
        String tipo = Tipo.getSelectedItem().toString();
        String categoria = txtIDCategoria.getText();
        
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDProcedimiento_Servicio, NombreProcedimiento, Descripcion, Tipo, MontoUnitario, MontoServicioDomicilio, IDCategoria, NombreUsuario FROM Procedimientos_Servicios WHERE IDCategoria = ? and Tipo = ?");
            ps.setString(1, categoria);
            ps.setString(2, tipo);
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                    Object[] fila = new Object[columnas];
                    for(int indice = 0; indice < columnas; indice++){
                        fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);  
            }
        }
        
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void MaximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaximoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaximoActionPerformed

    private void BuscarUbicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarUbicacionActionPerformed
        cargarTablaUbicacion();
    }//GEN-LAST:event_BuscarUbicacionActionPerformed

    private void cargarTablaUbicacion(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblVeterinario.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50};
        for(int i = 0; i < tblVeterinario.getColumnCount();i++){
            tblVeterinario.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        String ubicacion = Ubicacion.getText();
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDVeterinario, NombreVeterinario, Calificacion, Correo, SitioWeb, Distrito, Canton, Provincia, Señas, UGoogleMaps, Estado, NombreUsuario FROM Veterinario WHERE UGoogleMaps = ?");
            ps.setString(1, ubicacion);
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                Object[] fila = new Object[columnas];
                for(int indice = 0; indice < columnas; indice++){
                    fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);
                
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void VolverCliente1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverCliente1ActionPerformed
        // TODO add your handling code here:
        MenuCliente c = new MenuCliente();
        c.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VolverCliente1ActionPerformed

    private void BuscarVeterinariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarVeterinariosActionPerformed
        cargarTablaVeterinarios();
    }//GEN-LAST:event_BuscarVeterinariosActionPerformed

    private void cargarTablaVeterinarios(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblVeterinario.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50};
        for(int i = 0; i < tblVeterinario.getColumnCount();i++){
            tblVeterinario.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDVeterinario, NombreVeterinario, Calificacion, Correo, SitioWeb, Distrito, Canton, Provincia, Señas, UGoogleMaps, Estado, NombreUsuario FROM Veterinario");
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                Object[] fila = new Object[columnas];
                for(int indice = 0; indice < columnas; indice++){
                    fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);
                
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void RealizaCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RealizaCitaActionPerformed
       String nn = txtIDEnviarProSer.getText();
       String nu = txtEnviarNombreUsuarioVeterinario.getText();
       String na = txtRecibirUser.getText();
       CRUDCitas ru = new CRUDCitas();
       ru.setVisible(true);
       CRUDCitas.txtUsuarioVeterinarioCitas.setText(nu);
       CRUDCitas.txtIDProcedimiento.setText(nn);
       CRUDCitas.txtUsuarioCliente.setText(na);
    }//GEN-LAST:event_RealizaCitaActionPerformed

    private void VolverCliente2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverCliente2ActionPerformed
        String nu = this.txtRecibirUser.getText();
        String nn = this.txtRecibirROL1.getText();
        String ne = this.txtRecibirContra2.getText();
        MenuCliente c = new MenuCliente();
        c.setVisible(true);
        this.dispose();
        MenuCliente.txtEnviarUsuario.setText(nu);
        MenuCliente.txtRolEnviarCitas.setText(nn);
        MenuCliente.txtEnviarContra.setText(ne);
    }//GEN-LAST:event_VolverCliente2ActionPerformed
    
    private void cargarTablaTipoProcedimientoRangoPrecios(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblServicioProcedimientosBusCliente.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 50, 50, 50, 50, 50, 20, 10};
        for(int i = 0; i < tblServicioProcedimientosBusCliente.getColumnCount();i++){
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        
        String tipo = Tipo.getSelectedItem().toString();
        int Max = Integer.parseInt(this.Maximo.getText());
        int Min = Integer.parseInt(this.Minimo.getText());
        
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDProcedimiento_Servicio, NombreProcedimiento, Descripcion, Tipo, MontoUnitario, MontoServicioDomicilio, IDCategoria, NombreUsuario FROM Procedimientos_Servicios WHERE Tipo = ? and MontoUnitario >= ? and MontoUnitario <= ?");
            ps.setString(1, tipo);
            ps.setInt(2, Max);
            ps.setInt(3, Min);
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                    Object[] fila = new Object[columnas];
                    for(int indice = 0; indice < columnas; indice++){
                        fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);  
            }
        }
        
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void cargarTablaIDcategoriaRangoPrecios(){
        DefaultTableModel modeloTabla = (DefaultTableModel) tblServicioProcedimientosBusCliente.getModel();
        modeloTabla.setRowCount(0);
        
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rmsd;
        int columnas;
        
        int[] anchos = {25, 50, 50, 50, 50, 50, 20, 10};
        for(int i = 0; i < tblServicioProcedimientosBusCliente.getColumnCount();i++){
            tblServicioProcedimientosBusCliente.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        
        String categoria = txtIDCategoria.getText();
        int Max = Integer.parseInt(this.Maximo.getText());
        int Min = Integer.parseInt(this.Minimo.getText());
        
        try{
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT IDProcedimiento_Servicio, NombreProcedimiento, Descripcion, Tipo, MontoUnitario, MontoServicioDomicilio, IDCategoria, NombreUsuario FROM Procedimientos_Servicios WHERE IDCategoria = ? and MontoUnitario >= ? and MontoUnitario <= ?");
            ps.setString(1, categoria);
            ps.setInt(2, Max);
            ps.setInt(3, Min);
            rs = ps.executeQuery();
            rmsd = rs.getMetaData();
            columnas = rmsd.getColumnCount();
            
            while(rs.next()){
                    Object[] fila = new Object[columnas];
                    for(int indice = 0; indice < columnas; indice++){
                        fila[indice] = rs.getObject(indice+1);
                }
                modeloTabla.addRow(fila);  
            }
        }
        
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void txtBuscarGeneralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarGeneralActionPerformed

        String busqueda = cboElejirFiltroGeneral.getSelectedItem().toString();
        if(busqueda.equals("Tipo procedimiento")){
            cargarTablaTipo();
        }else if(busqueda.equals("ID categoría")){
            cargarTablaCategoria();
        }else if(busqueda.equals("Rango de precios")){
            cargarTablaPrecio();
        }else if(busqueda.equals("Tipo procedimiento, ID categoría")){
            String nn = txtIDCategoria.getText();
            if(nn.isEmpty()){
                JOptionPane.showMessageDialog(null, "El campo ID categoría está vacío", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }else{
                cargarTablaTipoProcedimientoIDCategoria();
            }
        }else if(busqueda.equals("Tipo procedimiento, Rango de precios")){ 
            String ma = Maximo.getText();
            String mi = Minimo.getText();
            if(ma.isEmpty()){
                if(mi.isEmpty()){
                    JOptionPane.showMessageDialog(null, "Los campos máximo y mínimo no pueden estar vacíos", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }else{
                cargarTablaTipoProcedimientoRangoPrecios();
            }
        }else if(busqueda.equals("ID categoría,  Rango de precios")){
            String mm = Maximo.getText();
            String mu = Minimo.getText();
            if(mm.isEmpty()){
                if(mu.isEmpty()){
                    JOptionPane.showMessageDialog(null, "Los campos máximo y mínimo no pueden estar vacíos", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }else{
                    cargarTablaIDcategoriaRangoPrecios();
                }
        }
    }//GEN-LAST:event_txtBuscarGeneralActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        
    }//GEN-LAST:event_jPanel1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BusquedaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BusquedaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BusquedaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BusquedaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BusquedaCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuscarTodos;
    private javax.swing.JButton BuscarUbicacion;
    private javax.swing.JButton BuscarVeterinarios;
    private javax.swing.JTextField Maximo;
    private javax.swing.JTextField Minimo;
    private javax.swing.JButton RealizaCita;
    private javax.swing.JComboBox<String> Tipo;
    private javax.swing.JTextField Ubicacion;
    private javax.swing.JButton VolverCliente1;
    private javax.swing.JButton VolverCliente2;
    private javax.swing.JComboBox<String> cboElejirFiltroGeneral;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblServicioProcedimientosBusCliente;
    private javax.swing.JTable tblVeterinario;
    private javax.swing.JButton txtBuscarGeneral;
    private javax.swing.JTextField txtEnviarNombreUsuarioVeterinario;
    private javax.swing.JTextField txtIDCategoria;
    private javax.swing.JTextField txtIDEnviarProSer;
    public static javax.swing.JTextField txtRecibirContra2;
    public static javax.swing.JTextField txtRecibirROL1;
    public static javax.swing.JTextField txtRecibirUser;
    // End of variables declaration//GEN-END:variables
}
